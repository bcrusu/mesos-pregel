// Code generated by protoc-gen-gogo.
// source: pregel.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	pregel.proto

It has these top-level messages:
	StartJobRequest
	StartJobReply
	GetJobStatusRequest
	GetJobStatusReply
	GetJobResultRequest
	GetJobResultReply
*/
package protos

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type StartJobRequest struct {
	Label           string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Store           string `protobuf:"bytes,2,opt,name=store,proto3" json:"store,omitempty"`
	StoreParams     []byte `protobuf:"bytes,3,opt,name=storeParams,proto3" json:"storeParams,omitempty"`
	Algorithm       string `protobuf:"bytes,4,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	AlgorithmParams []byte `protobuf:"bytes,5,opt,name=algorithmParams,proto3" json:"algorithmParams,omitempty"`
	VerticesPerTask int32  `protobuf:"varint,6,opt,name=verticesPerTask,proto3" json:"verticesPerTask,omitempty"`
}

func (m *StartJobRequest) Reset()                    { *m = StartJobRequest{} }
func (m *StartJobRequest) String() string            { return proto.CompactTextString(m) }
func (*StartJobRequest) ProtoMessage()               {}
func (*StartJobRequest) Descriptor() ([]byte, []int) { return fileDescriptorPregel, []int{0} }

func (m *StartJobRequest) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *StartJobRequest) GetStore() string {
	if m != nil {
		return m.Store
	}
	return ""
}

func (m *StartJobRequest) GetStoreParams() []byte {
	if m != nil {
		return m.StoreParams
	}
	return nil
}

func (m *StartJobRequest) GetAlgorithm() string {
	if m != nil {
		return m.Algorithm
	}
	return ""
}

func (m *StartJobRequest) GetAlgorithmParams() []byte {
	if m != nil {
		return m.AlgorithmParams
	}
	return nil
}

func (m *StartJobRequest) GetVerticesPerTask() int32 {
	if m != nil {
		return m.VerticesPerTask
	}
	return 0
}

type StartJobReply struct {
	JobId string `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
}

func (m *StartJobReply) Reset()                    { *m = StartJobReply{} }
func (m *StartJobReply) String() string            { return proto.CompactTextString(m) }
func (*StartJobReply) ProtoMessage()               {}
func (*StartJobReply) Descriptor() ([]byte, []int) { return fileDescriptorPregel, []int{1} }

func (m *StartJobReply) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

type GetJobStatusRequest struct {
	JobId string `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
}

func (m *GetJobStatusRequest) Reset()                    { *m = GetJobStatusRequest{} }
func (m *GetJobStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*GetJobStatusRequest) ProtoMessage()               {}
func (*GetJobStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptorPregel, []int{2} }

func (m *GetJobStatusRequest) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

type GetJobStatusReply struct {
}

func (m *GetJobStatusReply) Reset()                    { *m = GetJobStatusReply{} }
func (m *GetJobStatusReply) String() string            { return proto.CompactTextString(m) }
func (*GetJobStatusReply) ProtoMessage()               {}
func (*GetJobStatusReply) Descriptor() ([]byte, []int) { return fileDescriptorPregel, []int{3} }

type GetJobResultRequest struct {
	JobId string `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
}

func (m *GetJobResultRequest) Reset()                    { *m = GetJobResultRequest{} }
func (m *GetJobResultRequest) String() string            { return proto.CompactTextString(m) }
func (*GetJobResultRequest) ProtoMessage()               {}
func (*GetJobResultRequest) Descriptor() ([]byte, []int) { return fileDescriptorPregel, []int{4} }

func (m *GetJobResultRequest) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

type GetJobResultReply struct {
	JobId  string `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	Result []byte `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *GetJobResultReply) Reset()                    { *m = GetJobResultReply{} }
func (m *GetJobResultReply) String() string            { return proto.CompactTextString(m) }
func (*GetJobResultReply) ProtoMessage()               {}
func (*GetJobResultReply) Descriptor() ([]byte, []int) { return fileDescriptorPregel, []int{5} }

func (m *GetJobResultReply) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *GetJobResultReply) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*StartJobRequest)(nil), "protos.StartJobRequest")
	proto.RegisterType((*StartJobReply)(nil), "protos.StartJobReply")
	proto.RegisterType((*GetJobStatusRequest)(nil), "protos.GetJobStatusRequest")
	proto.RegisterType((*GetJobStatusReply)(nil), "protos.GetJobStatusReply")
	proto.RegisterType((*GetJobResultRequest)(nil), "protos.GetJobResultRequest")
	proto.RegisterType((*GetJobResultReply)(nil), "protos.GetJobResultReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Pregel service

type PregelClient interface {
	StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobReply, error)
	GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*GetJobStatusReply, error)
	GetJobResult(ctx context.Context, in *GetJobResultRequest, opts ...grpc.CallOption) (*GetJobResultReply, error)
}

type pregelClient struct {
	cc *grpc.ClientConn
}

func NewPregelClient(cc *grpc.ClientConn) PregelClient {
	return &pregelClient{cc}
}

func (c *pregelClient) StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobReply, error) {
	out := new(StartJobReply)
	err := grpc.Invoke(ctx, "/protos.Pregel/StartJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pregelClient) GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*GetJobStatusReply, error) {
	out := new(GetJobStatusReply)
	err := grpc.Invoke(ctx, "/protos.Pregel/GetJobStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pregelClient) GetJobResult(ctx context.Context, in *GetJobResultRequest, opts ...grpc.CallOption) (*GetJobResultReply, error) {
	out := new(GetJobResultReply)
	err := grpc.Invoke(ctx, "/protos.Pregel/GetJobResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pregel service

type PregelServer interface {
	StartJob(context.Context, *StartJobRequest) (*StartJobReply, error)
	GetJobStatus(context.Context, *GetJobStatusRequest) (*GetJobStatusReply, error)
	GetJobResult(context.Context, *GetJobResultRequest) (*GetJobResultReply, error)
}

func RegisterPregelServer(s *grpc.Server, srv PregelServer) {
	s.RegisterService(&_Pregel_serviceDesc, srv)
}

func _Pregel_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PregelServer).StartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Pregel/StartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PregelServer).StartJob(ctx, req.(*StartJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pregel_GetJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PregelServer).GetJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Pregel/GetJobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PregelServer).GetJobStatus(ctx, req.(*GetJobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pregel_GetJobResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PregelServer).GetJobResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Pregel/GetJobResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PregelServer).GetJobResult(ctx, req.(*GetJobResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pregel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Pregel",
	HandlerType: (*PregelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartJob",
			Handler:    _Pregel_StartJob_Handler,
		},
		{
			MethodName: "GetJobStatus",
			Handler:    _Pregel_GetJobStatus_Handler,
		},
		{
			MethodName: "GetJobResult",
			Handler:    _Pregel_GetJobResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pregel.proto",
}

func init() { proto.RegisterFile("pregel.proto", fileDescriptorPregel) }

var fileDescriptorPregel = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x52, 0xcd, 0x4e, 0xf3, 0x30,
	0x10, 0xac, 0xbf, 0x8f, 0x44, 0x74, 0x09, 0xaa, 0x70, 0xf9, 0x09, 0x85, 0x43, 0x14, 0x09, 0x29,
	0x12, 0x52, 0x0f, 0x70, 0xe5, 0xc2, 0x89, 0x9f, 0x53, 0xe4, 0xf2, 0x02, 0x0e, 0xac, 0x4a, 0xc1,
	0x95, 0x83, 0xed, 0x20, 0xf5, 0x31, 0xb9, 0xf2, 0x34, 0x28, 0x4e, 0x4d, 0x52, 0x13, 0x38, 0x25,
	0x33, 0x3b, 0x19, 0xed, 0xcc, 0x06, 0xa2, 0x52, 0xe1, 0x1c, 0xc5, 0xb4, 0x54, 0xd2, 0x48, 0x1a,
	0xda, 0x87, 0x4e, 0x3f, 0x08, 0x8c, 0x66, 0x86, 0x2b, 0x73, 0x2f, 0x0b, 0x86, 0x6f, 0x15, 0x6a,
	0x43, 0xf7, 0x21, 0x10, 0xbc, 0x40, 0x11, 0x93, 0x84, 0x64, 0x43, 0xd6, 0x80, 0x9a, 0xd5, 0x46,
	0x2a, 0x8c, 0xff, 0x35, 0xac, 0x05, 0x34, 0x81, 0x1d, 0xfb, 0x92, 0x73, 0xc5, 0x97, 0x3a, 0xfe,
	0x9f, 0x90, 0x2c, 0x62, 0x5d, 0x8a, 0x9e, 0xc2, 0x90, 0x8b, 0xb9, 0x54, 0x0b, 0xf3, 0xbc, 0x8c,
	0xb7, 0xec, 0xb7, 0x2d, 0x41, 0x33, 0x18, 0x7d, 0x83, 0xb5, 0x47, 0x60, 0x3d, 0x7c, 0xba, 0x56,
	0xbe, 0xa3, 0x32, 0x8b, 0x47, 0xd4, 0x39, 0xaa, 0x07, 0xae, 0x5f, 0xe3, 0x30, 0x21, 0x59, 0xc0,
	0x7c, 0x3a, 0x3d, 0x83, 0xdd, 0x36, 0x52, 0x29, 0x56, 0xf5, 0xea, 0x2f, 0xb2, 0xb8, 0x7b, 0x72,
	0x81, 0x2c, 0x48, 0xcf, 0x61, 0x7c, 0x83, 0xb5, 0x68, 0x66, 0xb8, 0xa9, 0x74, 0x27, 0x7d, 0x8f,
	0x78, 0x0c, 0x7b, 0x9b, 0xe2, 0x52, 0xac, 0x5a, 0x07, 0x86, 0xba, 0x12, 0xe6, 0x6f, 0x87, 0x6b,
	0xe7, 0xe0, 0xc4, 0xbf, 0x6e, 0x46, 0x0f, 0x21, 0x54, 0x56, 0x64, 0xbb, 0x8e, 0xd8, 0x1a, 0x5d,
	0x7c, 0x12, 0x08, 0x73, 0x7b, 0x45, 0x7a, 0x05, 0xdb, 0x2e, 0x23, 0x3d, 0x6a, 0x6e, 0xaa, 0xa7,
	0xde, 0x21, 0x27, 0x07, 0x3f, 0x07, 0xf5, 0xda, 0x03, 0x7a, 0x0b, 0x51, 0x37, 0x0d, 0x3d, 0x71,
	0xc2, 0x9e, 0x42, 0x26, 0xc7, 0xfd, 0x43, 0xcf, 0xa9, 0x49, 0xe5, 0x3b, 0x6d, 0x14, 0xe3, 0x3b,
	0x75, 0x8a, 0x48, 0x07, 0x45, 0xf3, 0x47, 0x5e, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x8b,
	0xa2, 0xe5, 0xa8, 0x02, 0x00, 0x00,
}
