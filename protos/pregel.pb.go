// Code generated by protoc-gen-gogo.
// source: pregel.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	pregel.proto

It has these top-level messages:
	PregelTaskParams
	CassandraStoreParams
	CassandraEntityRange
	ShortestPathAlgorithParams
	ShortestPathMessage
	Int32Value
*/
package protos

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type StoreType int32

const (
	StoreType_Cassandra StoreType = 0
)

var StoreType_name = map[int32]string{
	0: "Cassandra",
}
var StoreType_value = map[string]int32{
	"Cassandra": 0,
}

func (x StoreType) String() string {
	return proto.EnumName(StoreType_name, int32(x))
}
func (StoreType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPregel, []int{0} }

type AlgorithmType int32

const (
	AlgorithmType_ShortestPath AlgorithmType = 0
)

var AlgorithmType_name = map[int32]string{
	0: "ShortestPath",
}
var AlgorithmType_value = map[string]int32{
	"ShortestPath": 0,
}

func (x AlgorithmType) String() string {
	return proto.EnumName(AlgorithmType_name, int32(x))
}
func (AlgorithmType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPregel, []int{1} }

type PregelTaskParams struct {
	JobId           string        `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	Superstep       int32         `protobuf:"varint,2,opt,name=superstep,proto3" json:"superstep,omitempty"`
	StoreType       StoreType     `protobuf:"varint,3,opt,name=storeType,proto3,enum=protos.StoreType" json:"storeType,omitempty"`
	StoreParams     []byte        `protobuf:"bytes,4,opt,name=storeParams,proto3" json:"storeParams,omitempty"`
	AlgorithmType   AlgorithmType `protobuf:"varint,5,opt,name=algorithmType,proto3,enum=protos.AlgorithmType" json:"algorithmType,omitempty"`
	AlgorithmParams []byte        `protobuf:"bytes,6,opt,name=algorithmParams,proto3" json:"algorithmParams,omitempty"`
	EntityRange     []byte        `protobuf:"bytes,7,opt,name=entityRange,proto3" json:"entityRange,omitempty"`
}

func (m *PregelTaskParams) Reset()                    { *m = PregelTaskParams{} }
func (m *PregelTaskParams) String() string            { return proto.CompactTextString(m) }
func (*PregelTaskParams) ProtoMessage()               {}
func (*PregelTaskParams) Descriptor() ([]byte, []int) { return fileDescriptorPregel, []int{0} }

func (m *PregelTaskParams) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *PregelTaskParams) GetSuperstep() int32 {
	if m != nil {
		return m.Superstep
	}
	return 0
}

func (m *PregelTaskParams) GetStoreType() StoreType {
	if m != nil {
		return m.StoreType
	}
	return StoreType_Cassandra
}

func (m *PregelTaskParams) GetStoreParams() []byte {
	if m != nil {
		return m.StoreParams
	}
	return nil
}

func (m *PregelTaskParams) GetAlgorithmType() AlgorithmType {
	if m != nil {
		return m.AlgorithmType
	}
	return AlgorithmType_ShortestPath
}

func (m *PregelTaskParams) GetAlgorithmParams() []byte {
	if m != nil {
		return m.AlgorithmParams
	}
	return nil
}

func (m *PregelTaskParams) GetEntityRange() []byte {
	if m != nil {
		return m.EntityRange
	}
	return nil
}

type CassandraStoreParams struct {
	Hosts         []string                           `protobuf:"bytes,1,rep,name=hosts" json:"hosts,omitempty"`
	Keyspace      string                             `protobuf:"bytes,2,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	VerticesTable string                             `protobuf:"bytes,3,opt,name=verticesTable,proto3" json:"verticesTable,omitempty"`
	EdgesTable    string                             `protobuf:"bytes,4,opt,name=edgesTable,proto3" json:"edgesTable,omitempty"`
	BatchOptions  *CassandraStoreParams_BatchOptions `protobuf:"bytes,5,opt,name=batchOptions" json:"batchOptions,omitempty"`
}

func (m *CassandraStoreParams) Reset()                    { *m = CassandraStoreParams{} }
func (m *CassandraStoreParams) String() string            { return proto.CompactTextString(m) }
func (*CassandraStoreParams) ProtoMessage()               {}
func (*CassandraStoreParams) Descriptor() ([]byte, []int) { return fileDescriptorPregel, []int{1} }

func (m *CassandraStoreParams) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *CassandraStoreParams) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

func (m *CassandraStoreParams) GetVerticesTable() string {
	if m != nil {
		return m.VerticesTable
	}
	return ""
}

func (m *CassandraStoreParams) GetEdgesTable() string {
	if m != nil {
		return m.EdgesTable
	}
	return ""
}

func (m *CassandraStoreParams) GetBatchOptions() *CassandraStoreParams_BatchOptions {
	if m != nil {
		return m.BatchOptions
	}
	return nil
}

type CassandraStoreParams_BatchOptions struct {
	MaxSize  int32 `protobuf:"varint,1,opt,name=MaxSize,proto3" json:"MaxSize,omitempty"`
	MaxBytes int32 `protobuf:"varint,2,opt,name=MaxBytes,proto3" json:"MaxBytes,omitempty"`
}

func (m *CassandraStoreParams_BatchOptions) Reset()         { *m = CassandraStoreParams_BatchOptions{} }
func (m *CassandraStoreParams_BatchOptions) String() string { return proto.CompactTextString(m) }
func (*CassandraStoreParams_BatchOptions) ProtoMessage()    {}
func (*CassandraStoreParams_BatchOptions) Descriptor() ([]byte, []int) {
	return fileDescriptorPregel, []int{1, 0}
}

func (m *CassandraStoreParams_BatchOptions) GetMaxSize() int32 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

func (m *CassandraStoreParams_BatchOptions) GetMaxBytes() int32 {
	if m != nil {
		return m.MaxBytes
	}
	return 0
}

type CassandraEntityRange struct {
	StartToken int64 `protobuf:"varint,1,opt,name=startToken,proto3" json:"startToken,omitempty"`
	EndToken   int64 `protobuf:"varint,2,opt,name=endToken,proto3" json:"endToken,omitempty"`
}

func (m *CassandraEntityRange) Reset()                    { *m = CassandraEntityRange{} }
func (m *CassandraEntityRange) String() string            { return proto.CompactTextString(m) }
func (*CassandraEntityRange) ProtoMessage()               {}
func (*CassandraEntityRange) Descriptor() ([]byte, []int) { return fileDescriptorPregel, []int{2} }

func (m *CassandraEntityRange) GetStartToken() int64 {
	if m != nil {
		return m.StartToken
	}
	return 0
}

func (m *CassandraEntityRange) GetEndToken() int64 {
	if m != nil {
		return m.EndToken
	}
	return 0
}

type ShortestPathAlgorithParams struct {
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To   string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *ShortestPathAlgorithParams) Reset()                    { *m = ShortestPathAlgorithParams{} }
func (m *ShortestPathAlgorithParams) String() string            { return proto.CompactTextString(m) }
func (*ShortestPathAlgorithParams) ProtoMessage()               {}
func (*ShortestPathAlgorithParams) Descriptor() ([]byte, []int) { return fileDescriptorPregel, []int{3} }

func (m *ShortestPathAlgorithParams) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ShortestPathAlgorithParams) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type ShortestPathMessage struct {
	PathLength int64 `protobuf:"varint,1,opt,name=pathLength,proto3" json:"pathLength,omitempty"`
}

func (m *ShortestPathMessage) Reset()                    { *m = ShortestPathMessage{} }
func (m *ShortestPathMessage) String() string            { return proto.CompactTextString(m) }
func (*ShortestPathMessage) ProtoMessage()               {}
func (*ShortestPathMessage) Descriptor() ([]byte, []int) { return fileDescriptorPregel, []int{4} }

func (m *ShortestPathMessage) GetPathLength() int64 {
	if m != nil {
		return m.PathLength
	}
	return 0
}

type Int32Value struct {
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Int32Value) Reset()                    { *m = Int32Value{} }
func (m *Int32Value) String() string            { return proto.CompactTextString(m) }
func (*Int32Value) ProtoMessage()               {}
func (*Int32Value) Descriptor() ([]byte, []int) { return fileDescriptorPregel, []int{5} }

func (m *Int32Value) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*PregelTaskParams)(nil), "protos.PregelTaskParams")
	proto.RegisterType((*CassandraStoreParams)(nil), "protos.CassandraStoreParams")
	proto.RegisterType((*CassandraStoreParams_BatchOptions)(nil), "protos.CassandraStoreParams.BatchOptions")
	proto.RegisterType((*CassandraEntityRange)(nil), "protos.CassandraEntityRange")
	proto.RegisterType((*ShortestPathAlgorithParams)(nil), "protos.ShortestPathAlgorithParams")
	proto.RegisterType((*ShortestPathMessage)(nil), "protos.ShortestPathMessage")
	proto.RegisterType((*Int32Value)(nil), "protos.Int32Value")
	proto.RegisterEnum("protos.StoreType", StoreType_name, StoreType_value)
	proto.RegisterEnum("protos.AlgorithmType", AlgorithmType_name, AlgorithmType_value)
}

func init() { proto.RegisterFile("pregel.proto", fileDescriptorPregel) }

var fileDescriptorPregel = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x53, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0xad, 0x9d, 0xb8, 0xfd, 0x79, 0xea, 0xf4, 0x17, 0x96, 0x20, 0x59, 0x11, 0x42, 0xc6, 0xe2,
	0x60, 0x7a, 0x08, 0x52, 0x2a, 0x4e, 0x5c, 0xa0, 0xc0, 0xa1, 0x12, 0x11, 0xd1, 0x26, 0xe2, 0xbe,
	0x49, 0x06, 0xdb, 0x24, 0xf1, 0x5a, 0xbb, 0xd3, 0xaa, 0xe1, 0xe3, 0xc0, 0x17, 0x45, 0x5e, 0xff,
	0xc9, 0x06, 0x71, 0xf2, 0xbe, 0x37, 0xb3, 0x33, 0x6f, 0xde, 0x8e, 0x21, 0x28, 0x15, 0xa6, 0xb8,
	0x9b, 0x94, 0x4a, 0x92, 0x64, 0xe7, 0xe6, 0xa3, 0xe3, 0x5f, 0x2e, 0x0c, 0xe7, 0x26, 0xb0, 0x14,
	0x7a, 0x3b, 0x17, 0x4a, 0xec, 0x35, 0x1b, 0x81, 0xf7, 0x43, 0xae, 0xee, 0x36, 0xa1, 0x13, 0x39,
	0x89, 0xcf, 0x6b, 0xc0, 0x9e, 0x83, 0xaf, 0xef, 0x4b, 0x54, 0x9a, 0xb0, 0x0c, 0xdd, 0xc8, 0x49,
	0x3c, 0x7e, 0x24, 0xd8, 0x1b, 0xf0, 0x35, 0x49, 0x85, 0xcb, 0x43, 0x89, 0x61, 0x2f, 0x72, 0x92,
	0xab, 0xe9, 0x93, 0xba, 0x97, 0x9e, 0x2c, 0xda, 0x00, 0x3f, 0xe6, 0xb0, 0x08, 0x2e, 0x0d, 0xa8,
	0x7b, 0x86, 0xfd, 0xc8, 0x49, 0x02, 0x6e, 0x53, 0xec, 0x1d, 0x0c, 0xc4, 0x2e, 0x95, 0x2a, 0xa7,
	0x6c, 0x6f, 0xca, 0x7a, 0xa6, 0xec, 0xb3, 0xb6, 0xec, 0x07, 0x3b, 0xc8, 0x4f, 0x73, 0x59, 0x02,
	0xff, 0x77, 0x44, 0xd3, 0xe2, 0xdc, 0xb4, 0xf8, 0x9b, 0xae, 0x84, 0x60, 0x41, 0x39, 0x1d, 0xb8,
	0x28, 0x52, 0x0c, 0x2f, 0x6a, 0x21, 0x16, 0x15, 0xff, 0x76, 0x61, 0xf4, 0x51, 0x68, 0x2d, 0x8a,
	0x8d, 0x12, 0x0b, 0x4b, 0xe1, 0x08, 0xbc, 0x4c, 0x6a, 0xd2, 0xa1, 0x13, 0xf5, 0x2a, 0xa3, 0x0c,
	0x60, 0x63, 0xf8, 0x6f, 0x8b, 0x07, 0x5d, 0x8a, 0x35, 0x1a, 0x9f, 0x7c, 0xde, 0x61, 0xf6, 0x0a,
	0x06, 0x0f, 0xa8, 0x28, 0x5f, 0xa3, 0x5e, 0x8a, 0xd5, 0xae, 0xb6, 0xca, 0xe7, 0xa7, 0x24, 0x7b,
	0x01, 0x80, 0x9b, 0xb4, 0x4d, 0xe9, 0x9b, 0x14, 0x8b, 0x61, 0x33, 0x08, 0x56, 0x82, 0xd6, 0xd9,
	0xd7, 0x92, 0x72, 0x59, 0x68, 0x63, 0xcc, 0xe5, 0xf4, 0x75, 0x6b, 0xcc, 0xbf, 0xb4, 0x4e, 0x6e,
	0xad, 0x0b, 0xfc, 0xe4, 0xfa, 0xf8, 0x13, 0x04, 0x76, 0x94, 0x85, 0x70, 0x31, 0x13, 0x8f, 0x8b,
	0xfc, 0x27, 0x9a, 0x0d, 0xf0, 0x78, 0x0b, 0xab, 0xd1, 0x66, 0xe2, 0xf1, 0xf6, 0x40, 0xa8, 0x9b,
	0x15, 0xe8, 0x70, 0xcc, 0x2d, 0x93, 0x3e, 0x1f, 0xdd, 0xab, 0x86, 0xd1, 0x24, 0x14, 0x2d, 0xe5,
	0x16, 0x0b, 0x53, 0xb0, 0xc7, 0x2d, 0xa6, 0xaa, 0x89, 0xc5, 0xa6, 0x8e, 0xba, 0x26, 0xda, 0xe1,
	0xf8, 0x3d, 0x8c, 0x17, 0x99, 0x54, 0x84, 0x9a, 0xe6, 0x82, 0xb2, 0xf6, 0xc5, 0x1b, 0xfb, 0x19,
	0xf4, 0xbf, 0x2b, 0xb9, 0x6f, 0xd6, 0xd4, 0x9c, 0xd9, 0x15, 0xb8, 0x24, 0x1b, 0xdb, 0x5d, 0x92,
	0xf1, 0x5b, 0x78, 0x6a, 0x57, 0x98, 0xa1, 0xd6, 0xa2, 0x16, 0x55, 0x0a, 0xca, 0xbe, 0x60, 0x91,
	0x52, 0xd6, 0x8a, 0x3a, 0x32, 0x71, 0x0c, 0x70, 0x57, 0xd0, 0xcd, 0xf4, 0x9b, 0xd8, 0xdd, 0x63,
	0xf5, 0xce, 0x0f, 0xd5, 0xa1, 0xb1, 0xa3, 0x06, 0xd7, 0x63, 0xf0, 0xbb, 0xcd, 0x66, 0x03, 0xf0,
	0xbb, 0xe9, 0x87, 0x67, 0xd7, 0x2f, 0x61, 0x70, 0xb2, 0x9e, 0x6c, 0x08, 0x81, 0xad, 0x63, 0x78,
	0xb6, 0xaa, 0x7f, 0xc1, 0x9b, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x66, 0xe3, 0xfd, 0x68, 0x99,
	0x03, 0x00, 0x00,
}
